ext {
    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'
    androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.7.0'
    androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.2.1'
    androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.6.1'
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.2'
    }
}

apply plugin: 'com.android.library'

android {
    namespace "com.centralcash.agilli.integration.plugin"
    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 35

    defaultConfig {
        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 23
        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        newland { dimension "version" }
        gertec { dimension "version" }
        gertecGPOS760 { dimension "version" }
        gertecGPOS700mini { dimension "version" }
    }

    publishing {
    singleVariant("newlandDebug")
    singleVariant("gertecDebug")
    singleVariant("gertecGPOS760Debug")
    singleVariant("gertecGPOS700miniDebug")
    singleVariant("newlandRelease")
    singleVariant("gertecRelease")
    singleVariant("gertecGPOS760Release")
    singleVariant("gertecGPOS700miniRelease")
}
}

repositories {
    google()
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':capacitor-android')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation(name: 'agilli-sdk-1.4-debug', ext: 'aar')
}

tasks.whenTaskAdded { task ->
    if (task.name == 'packageGertecDebugResources') {
        task.dependsOn(':agilli:generateGertecDebugResValues')
    }
    if (task.name == 'compileGertecDebugLibraryResources') {
        task.dependsOn(':agilli:packageGertecDebugResources')
    }
    if (task.name == 'extractDeepLinksGertecDebug') {
        task.dependsOn(':agilli-integration:generateGertecDebugResValues')
        task.dependsOn(':agilli:generateGertecDebugResValues')
    }
    if (task.name == 'parseGertecDebugLocalResources') {
        task.dependsOn(':agilli-integration:packageGertecDebugResources')
    }
    if (task.name == 'generateGertecDebugRFile') {
        task.dependsOn(':agilli-integration:processGertecDebugManifest')
    }
    if (task.name == 'generateGertecDebugRFile') {
        task.dependsOn(':agilli-integration:parseGertecDebugLocalResources')
    }
    if (task.name == 'parseGertecDebugLocalResources') {
        task.dependsOn(':agilli:packageGertecDebugResources')
    }
    if (task.name == 'generateGertecDebugRFile') {
        task.dependsOn(':agilli:parseGertecDebugLocalResources')
        task.dependsOn(':agilli:processGertecDebugManifest')
    }
    if (task.name == 'packageGertecDebugAssets') {
        task.dependsOn(':agilli:compileGertecDebugShaders')
    }
     if (task.name == 'compileGertecDebugJavaWithJavac') {
        task.dependsOn ':agilli:javaPreCompileGertecDebug'
        task.dependsOn ':agilli:generateGertecDebugRFile'
    }
    
}



